package com.tech.controllers;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.tech.model.Industry;
import com.tech.model.JwtMessage;
import com.tech.model.Leaders;
import com.tech.model.Location;
import com.tech.model.Notification;
import com.tech.model.Post;
import com.tech.model.Skill;
import com.tech.model.Users;
import com.tech.services.FollowServiceImpl;
import com.tech.services.IndustryServiceImpl;
import com.tech.services.LeadersServicesImpl;
import com.tech.services.LocationServiceImpl;
import com.tech.services.PostServicesImpl;
import com.tech.services.SkillServiceImpl;

@CrossOrigin("*")
@RequestMapping("/leader")
@RestController
public class LeaderController {
	private static final Logger LOGGER=LoggerFactory.getLogger(LeaderController.class);
	@Autowired
	LeadersServicesImpl leadServ;
	@Autowired
	FollowServiceImpl fServ;
	@Autowired
	SkillServiceImpl skillServ;
	@Autowired
	IndustryServiceImpl indServ;
	@Autowired
	LocationServiceImpl locServ;
	@Autowired
	PostServicesImpl postServ;
	/*Mapping for deleting a Leader*/
	@DeleteMapping(value="/delete/{id}")
	public ResponseEntity<?> deleteLeader(@PathVariable int id) {
		leadServ.deleteLeader(id);
		LOGGER.info("************\n\nLeader of id {} deleted successfully.",id);
		return ResponseEntity.ok(new JwtMessage("Leader Deleted of id:"+id));
	}
	/*Mapping for updating a Leader's Skill*/
	@PutMapping(value="/SkillUp/{skillId}")
	public ResponseEntity<?> updateLeaderSkill(@PathVariable int skillId) {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String email ="";
		if(principal instanceof UserDetails)
			email = ((UserDetails)principal).getUsername();
		else
			email = principal.toString();
		int id = leadServ.getLeaderId(email);
		leadServ.updateLeaderSkill(skillId,id);
		Notification n = new Notification("Leader "+id+" has updated skill");
		//n.notificationcall();
		LOGGER.info("************\n\nSkill updated for leader {}",id);
		return ResponseEntity.ok(new JwtMessage("Skill updated for leader"+id));
	}
	/*Mapping for updating a Leader's Location*/
	@PutMapping(value="/LocationUp/{locId}")
	public ResponseEntity<?> updateLeaderLoc(@PathVariable int locId) {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String email ="";
		if(principal instanceof UserDetails)
			email = ((UserDetails)principal).getUsername();
		else
			email = principal.toString();
		int id = leadServ.getLeaderId(email);
		leadServ.updateLeaderLocation(locId,id);
		LOGGER.info("************\n\nLocation updated for leader {}",id);
		return ResponseEntity.ok(new JwtMessage("Location updated for leader"+id));
	}

	/*Mapping for updating a Leader's Industry*/
	@PutMapping(value="/IndustryUp/{indId}")
	public ResponseEntity<?> updateLeaderInd(@PathVariable int indId) {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String email ="";
		if(principal instanceof UserDetails)
			email = ((UserDetails)principal).getUsername();
		else
			email = principal.toString();
		int id = leadServ.getLeaderId(email);
		leadServ.updateLeaderIndustry(indId,id);
		LOGGER.info("************\n\nIndustry updated for leader {}",id);
		return ResponseEntity.ok(new JwtMessage("Industry updated for leader"+id));
	}

	/*Mapping for updating a Leader's Contact*/
	@PutMapping(value="/ContactUp/{ph}")
	public ResponseEntity<?> updateLeaderPh(@PathVariable String ph) {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String email ="";
		if(principal instanceof UserDetails)
			email = ((UserDetails)principal).getUsername();
		else
			email = principal.toString();
		int id = leadServ.getLeaderId(email);
		leadServ.updateLeaderContact(ph,id);
		LOGGER.info("************\n\nContact updated for leader {}",id);
		return ResponseEntity.ok(new JwtMessage("Contact updated for leader"+id));
	}
	/*Mapping for fetching followers*/
	@RequestMapping("/myFollowers")
	public List<Object> getFollowers() {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String email ="";
		if(principal instanceof UserDetails)
			email = ((UserDetails)principal).getUsername();
		else
			email = principal.toString();
		int id = leadServ.getLeaderId(email);
		LOGGER.info("************\n\nReturned to the client the list of followers");
		return fServ.getFollowers(id);
	}
	/*Mapping for adding a skill*/
	@PostMapping(value="/addSkill")
	public ResponseEntity<?> addSkill(@RequestBody Skill skill) {
		skillServ.add(skill);
		return ResponseEntity.ok(new JwtMessage("Skill added"));
	}
	/*Mapping for editing a skill*/
	@PostMapping(value="/editSkill/{id}")
	public ResponseEntity<?> editSkill(@RequestBody Skill skill,@PathVariable int id) {
		skill.setId(id);
		skillServ.edit(skill);
		return ResponseEntity.ok(new JwtMessage("Skill edited"));
	}
	/*Mapping for delete a skill*/
	@DeleteMapping(value="/skill/{id}")
	public ResponseEntity<?> deleteSkill(@PathVariable int id) {
		skillServ.delete(id);
		return ResponseEntity.ok(new JwtMessage("Skill Deleted of id:"+id));
	}
	/*Mapping for adding a industry*/
	@PostMapping(value="/addIndustry")
	public ResponseEntity<?> addIndustry(@RequestBody Industry ind) {
		indServ.add(ind);
		return ResponseEntity.ok(new JwtMessage("Industry added"));
	}
	/*Mapping for editing a industry*/
	@PostMapping(value="/editIndustry/{id}")
	public ResponseEntity<?> eidtIndustry(@RequestBody Industry ind,@PathVariable int id) {
		ind.setId(id);
		indServ.edit(ind);
		return ResponseEntity.ok(new JwtMessage("Industry edited"));
	}
	/*Mapping for delete a industry*/
	@DeleteMapping(value="/industry/{id}")
	public ResponseEntity<?> deleteIndustry(@PathVariable int id) {
		indServ.delete(id);
		return ResponseEntity.ok(new JwtMessage("Industry Deleted of id:"+id));
	}
	/*Mapping for adding a locations*/
	@PostMapping(value="/addLocation")
	public ResponseEntity<?> addLocation(@RequestBody Location loc) {
		locServ.add(loc);
		return ResponseEntity.ok(new JwtMessage("Location added"));
	}
	/*Mapping for editing a locations*/
	@PostMapping(value="/editLocation/{id}")
	public ResponseEntity<?> editLocation(@RequestBody Location loc,@PathVariable int id) {
		loc.setId(id);
		locServ.edit(loc);
		return ResponseEntity.ok(new JwtMessage("Location edited"));
	}
	/*Mapping for delete a locations*/
	@DeleteMapping(value="/location/{id}")
	public ResponseEntity<?> deleteLoaction(@PathVariable int id) {
		locServ.delete(id);
		return ResponseEntity.ok(new JwtMessage("Location Deleted of id:"+id));
	}
	/*Mapping for creating a post*/
	@PostMapping("/addPost")
	public ResponseEntity<?> createPost(@RequestBody Post post){
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String email ="";
		if(principal instanceof UserDetails)
			email = ((UserDetails)principal).getUsername();
		else
			email = principal.toString();
		Leaders lead = leadServ.getLeaderByEmail(email).get();
		post.setCreatedBy(lead);
		postServ.add(post);
		LOGGER.info("************\n\nPost has been created by leader {}",lead.getLeaderId());
		return ResponseEntity.ok(new JwtMessage("Post has been created by leader"+lead.getLeaderId()));
	}
	/*Mapping for editing a post*/
	@RequestMapping("/editPost")
	public ResponseEntity<?> editPost(@RequestBody Post post){
		postServ.editPost(post);
		LOGGER.info("************\n\nPost of id {} has been updated",post.getId());
		return ResponseEntity.ok(new JwtMessage("Post of id "+ post.getId()+" has been updated"));
	}
	/*Mapping for deleting a Post*/
	@DeleteMapping(value="/deletePost/{id}")
	public ResponseEntity<?> deletePost(@PathVariable int id) {
		try{
			postServ.delete(id);
			LOGGER.info("************\n\nPost of id {} deleted successfully.",id);
			return ResponseEntity.ok(new JwtMessage("Post Deleted of id:"+id));
		}
		catch(EmptyResultDataAccessException e) {
			LOGGER.info("************\n\nPost of id {} is not present.",id);
			return ResponseEntity.ok(new JwtMessage("Post of id:"+id+" is not present!!"));
		}
	}
	/*Mapping for getting all post*/
	@RequestMapping(value="/getAllPost")
	public List<Post> getAllPost(){
		return postServ.viewAll();
	}
	/*Mapping for getting logged leaders post*/
	@RequestMapping("/myPosts")
	public List<Post> getMyPosts() {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String email ="";
		if(principal instanceof UserDetails)
			email = ((UserDetails)principal).getUsername();
		else
			email = principal.toString();
		int id = leadServ.getLeaderId(email);
		return postServ.viewAllById(id);
	}
	/*Mapping for fetching user details from email*/
	@RequestMapping("/leaderDetails/{email}")
	public Leaders getDetails(@PathVariable String email) {
		Leaders u = leadServ.getLeaderByEmail(email).get();
		LOGGER.info("************\n\nReturned to the client the entire details of the leader");
		return u;
	}
}
